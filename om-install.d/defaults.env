# NOTE this file will be sourced, so valid bash synthax is required here

#
# some default environment variables
#

OM_USER="om"
OM_INSTALL_DIR="/opt/openmetrics"
OM_AGENT_DIR="/opt/openmetrics/om-agent"

export OM_USER OM_INSTALL_DIR OM_AGENT_DIR

#
# some generic functions
#
function evalInput() {
	# overwrite passed variable with last line of user input
	if [ ! -z "$REPLY" ]; then
		eval $*=\""$REPLY"\"
	fi
}

# FIXME hitting enter should accept default value, check $REPLY to be empty and use value of args $* then
function evalYesNo() {
    case "$REPLY" in
        [Yy]* ) eval $*=true; break;;
        [Nn]* ) eval $*=false; exit;;
        * ) log-cyan "Please answer yes or no.\n";;
    esac
}

function lowercase(){
	echo "$1" | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/"
}

function linebreak {
	echo -e "----------------------------------------------------------\n\n"
}


# get system info
# from https://github.com/coto/server-easy-install/blob/master/lib/core.sh
#
function systemInfo(){
    log "Gathering system information...\n"
	OS=`lowercase \`uname\``
	KERNEL=`uname -r`
	MACH=`uname -m`

	if [ "${OS}" == "windowsnt" ]; then
		OS=windows
	elif [ "${OS}" == "darwin" ]; then
		OS=mac
	else
		OS=`uname`
		if [ "${OS}" = "SunOS" ] ; then
			OS=Solaris
			ARCH=`uname -p`
			OSSTR="${OS} ${REV}(${ARCH} `uname -v`)"
		elif [ "${OS}" = "AIX" ] ; then
			OSSTR="${OS} `oslevel` (`oslevel -r`)"
		elif [ "${OS}" = "Linux" ] ; then
			if [ -f /etc/redhat-release ] ; then
				DistroBasedOn='RedHat'
				DIST=`cat /etc/redhat-release |sed s/\ release.*//`
				PSEUDONAME=`cat /etc/redhat-release | sed s/.*\(// | sed s/\)//`
				REV=`cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//`
			elif [ -f /etc/SuSE-release ] ; then
				DistroBasedOn='SuSe'
				PSEUDONAME=`cat /etc/SuSE-release | tr "\n" ' '| sed s/VERSION.*//`
				REV=`cat /etc/SuSE-release | tr "\n" ' ' | sed s/.*=\ //`
			elif [ -f /etc/mandrake-release ] ; then
				DistroBasedOn='Mandrake'
				PSEUDONAME=`cat /etc/mandrake-release | sed s/.*\(// | sed s/\)//`
				REV=`cat /etc/mandrake-release | sed s/.*release\ // | sed s/\ .*//`
			elif [ -f /etc/debian_version ] ; then
				DistroBasedOn='Debian'
				if [ -f /etc/lsb-release ] ; then
			        	DIST=`cat /etc/lsb-release | grep '^DISTRIB_ID' | awk -F=  '{ print $2 }'`
			                PSEUDONAME=`cat /etc/lsb-release | grep '^DISTRIB_CODENAME' | awk -F=  '{ print $2 }'`
			                REV=`cat /etc/lsb-release | grep '^DISTRIB_RELEASE' | awk -F=  '{ print $2 }'`
            			fi
			fi
			if [ -f /etc/UnitedLinux-release ] ; then
				DIST="${DIST}[`cat /etc/UnitedLinux-release | tr "\n" ' ' | sed s/VERSION.*//`]"
			fi
			OS=`lowercase $OS`
			DistroBasedOn=`lowercase $DistroBasedOn`
		 	readonly OS
		 	readonly DIST
			readonly DistroBasedOn
		 	readonly PSEUDONAME
		 	readonly REV
		 	readonly KERNEL
		 	readonly MACH
		fi
	fi

	debug "OS: $OS\n"
	debug "DIST: $DIST\n"
	debug "PSUEDONAME: $PSUEDONAME\n"
	debug "REV: $REV\n"
	debug "DistroBasedOn: $DistroBasedOn\n"
	debug "KERNEL: $KERNEL\n"
	debug "MACH: $MACH\n"
}



# colors http://misc.flogisoft.com/bash/tip_colors_and_formatting
RESTORE='\033[0m' # used to reset colors to default
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
LIGHTGRAY='\033[00;37m'
GRAY='\033[00;90m'
DARKGRAY='\033[00;90m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'

function test_colors(){
  echo -e "${GREEN}Hello ${CYAN}THERE${RESTORE} Restored here ${LCYAN}HELLO again ${RED} Red socks aren't sexy ${BLUE} neither are blue ${RESTORE} "
}

# some echo wrapper for logging and colorized output
function log () {
    echo -en "$@"
}

function log-blue(){
  echo -en "${LBLUE}$*"
  echo -en "${RESTORE}"
}

function log-red(){
  echo -en "${RED}$*"
  echo -en "${RESTORE}"
}

function log-green(){
  echo -en "${GREEN}$*"
  echo -en "${RESTORE}"
}

function log-cyan(){
  echo -en "${LCYAN}$*"
  echo -en "${RESTORE}"
}

function debug () {
    if [[ $_V -eq 1 ]]; then
        echo -en "${GRAY}$@"
        echo -en "${RESTORE}"
    fi
}

function colorize(){
  echo -en "${LBLUE}$*"
  echo -en "${RESTORE}"
}

# for colored prompt
 function pause(){
   echo -en "${LCYAN}"
   read -p "[Paused] $*" FOO_discarded
   echo -en "${RESTORE}"
 }